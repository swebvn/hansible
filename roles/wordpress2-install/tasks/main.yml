- name: Create system user
  user:
    name: "{{ site_user }}"
    shell: /bin/bash
    create_home: yes

- name: Create website and tmp directory
  file:
    path: "/home/{{ username }}/{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: '0755'
  loop:
    - tmp
    - "{{ site_domain }}"

- name: Ensure PHP-FPM pool config exists
  template:
    src: php-fpm-pool.conf.j2
    dest: "/etc/php/8.1/fpm/pool.d/{{ username }}.conf"
    mode: '0644'
  notify: Restart PHP-FPM

- name: Create MySQL database and user using shell
  become: true
  shell: |
    mysql -u root <<EOF
    CREATE DATABASE IF NOT EXISTS {{ db_name }} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE USER IF NOT EXISTS '{{ db_user }}'@'localhost' IDENTIFIED BY '{{ db_password }}';
    GRANT ALL PRIVILEGES ON {{ db_name }}.* TO '{{ db_user }}'@'localhost';
    FLUSH PRIVILEGES;
    EOF

- name: Ensure /etc/caddy/sites directory exists
  file:
    path: /etc/caddy/sites
    state: directory
    mode: '0755'

- name: Configure Caddy site
  template:
    src: caddy-site.conf.j2
    dest: "/etc/caddy/sites/{{ site_domain }}.conf"
    mode: '0644'
  notify: Reload Caddy

- name: Link site config to Caddyfile (optional if you use includes)
  lineinfile:
    path: /etc/caddy/Caddyfile
    line: "import sites/{{ site_domain }}.conf"
    create: yes
    insertafter: EOF
    state: present

- name: Download latest WordPress
  become: true
  command: wp core download --path=/home/{{ username }}/{{ site_domain }} --allow-root
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

- name: Create wp-config.php
  become: true
  command: >
    wp config create
    --dbname={{ db_name }}
    --dbuser={{ db_user }}
    --dbpass={{ db_password }}
    --dbhost=localhost
    --skip-check
    --allow-root
    --path=/home/{{ username }}/{{ site_domain }}
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

- name: Install WordPress
  become: true
  command: >
    wp core install
    --url="https://{{ site_domain }}"
    --title="Demo Site"
    --admin_user="s-admin"
    --admin_password={{site_pass}}
    --admin_email="admin@sweb.vn"
    --allow-root
    --path=/home/{{ username }}/{{ site_domain }}
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

- name: Copy all-in-one-wp-migration-url-extension plugin to server
  become: true
  copy:
    src: all-in-one-wp-migration-url-extension.zip
    dest: /home/{{ username }}/{{ site_domain }}/
    mode: '0644'

- name: Install all-in-one-wp-migration-url-extension plugin
  become: true
  shell: |
    cd /home/{{ username }}/{{ site_domain }}
    wp plugin install all-in-one-wp-migration-url-extension.zip --activate --allow-root
  args:
    creates: "/home/{{ username }}/{{ site_domain }}/wp-content/plugins/all-in-one-wp-migration-url-extension"


- name: Copy all-in-one-wp-migration plugin to server
  become: true
  copy:
    src: all-in-one-wp-migration.7.38.zip
    dest: /home/{{ username }}/{{ site_domain }}/
    mode: '0644'

- name: Install all-in-one-wp-migration plugin
  become: true
  shell: |
    cd /home/{{ username }}/{{ site_domain }}
    wp plugin install all-in-one-wp-migration.7.38.zip --activate --allow-root
  args:
    creates: "/home/{{ username }}/{{ site_domain }}/wp-content/plugins/all-in-one-wp-migration"


- name: Set permissions for wp-content
  file:
    path: "/home/{{ username }}/{{ site_domain }}/wp-content"
    state: directory
    recurse: yes
    owner: "{{ username }}"
    group: www-data
    mode: '0775'

- name: Allow access into user home directory
  file:
    path: "/home/{{ username }}"
    mode: '0751'

- name: Set ownership for WordPress directory
  file:
    path: "/home/{{ username }}/{{ site_domain }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    recurse: yes
    state: directory

- name: Set password for FTP user
  become: true
  user:
    name: "{{ site_user }}"
    password: "{{ site_pass | password_hash('sha512') }}"


# Add the backup restoration task
- name: Create ai1wm-backups directory
  become: true
  file:
    path: "/home/{{ username }}/{{ site_domain }}/wp-content/ai1wm-backups"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: '0755'

- name: Download backup file
  become: true
  get_url:
    url: "{{ source_restore_url | default('https://tda4-gmc.tda-demo.com/wp-content/ai1wm-backups/tda4-gmc.tda-demo.com-20250512-034930-uw4gsh.wpress') }}"
    dest: "/home/{{ username }}/{{ site_domain }}/wp-content/ai1wm-backups/{{ backup_file_name | default('backup.wpress') }}"
    mode: '0644'
  when: source_restore_url is defined and backup_file_name is defined

- name: Set ownership of backup file
  become: true
  file:
    path: "/home/{{ username }}/{{ site_domain }}/wp-content/ai1wm-backups"
    owner: "{{ username }}"
    group: "{{ username }}"
    recurse: yes
    state: directory
  when: backup_file_name is defined

- name: Restore backup using All-in-One WP Migration
  become: true
  become_user: "{{ username }}"
  command: >
    wp ai1wm restore {{ backup_file_name | default('backup.wpress') }} --yes
    --path=/home/{{ username }}/{{ site_domain }}
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
  when: backup_file_name is defined